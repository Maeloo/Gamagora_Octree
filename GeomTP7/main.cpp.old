#pragma once
/*
*	Tableau des points permettant de gérer les points de controles
* On sélectionne le point en se déplaçant avec + et -, ...
* On sélectionne ensuite si on veut faire monter, descendre amener vers la gauche ou la droite le point.
*   d : translation à droite
*   q : à gauche
*   z : en haut
*   s : en bas
*
*/

#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <GL/glut.h>
#include "struct.h"

/* au cas ou M_PI ne soit defini */
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

#define WIDTH  600
#define HEIGHT 600

#define ESC 27

float angleX = 0.0f; //angle de rotation en Y de la scene
float angleY = 0.0f; //angle de rotation en X de la 


void drawVoxel(point3 origin, float size) {
	glBegin(GL_LINE_STRIP);

	glVertex3f(origin.x - size, origin.y - size, origin.z - size);       // P1
	glVertex3f(origin.x - size, origin.y + size, origin.z - size);       // P2
	glVertex3f(origin.x + size, origin.y + size, origin.z - size);       // P3
	glVertex3f(origin.x + size, origin.y - size, origin.z - size);       // P4

	glEnd();
}


/* initialisation d'OpenGL*/
static void init()
{
	glClearColor(0.0, 0.0, 0.0, 0.0);
}

/* Dessin */
void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); //effacement du buffer
	glLoadIdentity();

	glEnable(GL_DEPTH_TEST);
	//glEnable ( GL_CULL_FACE );

	glRotatef(-angleY, 0.0f, 0.0f, 1.0f);
	glRotatef(angleX, 0.0f, 1.0f, 0.0f);
	glRotatef(-angleY, 0.0f, 0.0f, 1.0f);
	glRotatef(angleX, 0.0f, 1.0f, 0.0f);

	point3 origin = point3(0.5f, 0.f, 0.f);

	drawVoxel(origin, 0.5f);
	
	//glFlush();
}

GLvoid gestionSouris(int x, int y) {
	angleX = x * 720 / WIDTH; //gere l'axe Oy
	angleY = -(y * 180 / HEIGHT - 90) * 4; //gere l'axe Ox

	glutPostRedisplay();
}

/* Au cas ou la fenetre est modifiee ou deplacee */
void reshape(int w, int h)
{
	glViewport(0, 0, (GLsizei)w, (GLsizei)h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-20, 20, -20, 20, -10, 10);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

void keyboard(unsigned char key, int x, int y)
{
	switch (key) {

	case '+':
		break;

	case '-':
		break;

	case 'd':
		break;

	case 'q':
		break;

	case 'z':
		break;

	case 's':
		break;

	case ESC:
		exit(0);
		break;

	default:
		break;
	}

	glutPostRedisplay();
}

int main(int argc, char **argv)
{
	glutInitWindowSize(400, 400);
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_RGB);
	glutCreateWindow("Volume");
	init();
	glutReshapeFunc(reshape);
	glutKeyboardFunc(keyboard);
	glutDisplayFunc(display);
	glutPassiveMotionFunc(gestionSouris);
	glutMainLoop();
	return 0;
}